# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: "${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}"
        restore-keys: |
            ${{ runner.os }}-gradle-

    - name: Set up QEMU #(0)
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - name: Check if Docker Buildx is set up
      id: buildx_check
      run: |
        if docker buildx inspect mybuilder > /dev/null 2>&1; then
          echo "buildx_exists=true" >> $GITHUB_ENV
        else
          echo "buildx_exists=false" >> $GITHUB_ENV
        fi

    - name: Set up Docker Buildx  #(0)
      if: env.buildx_exists == 'false'
      uses: docker/setup-buildx-action@v2
      with:
          install: true

    - name: Create builder  #(0)
      if: env.buildx_exists == 'false'
      run: |
        docker buildx create --name mybuilder --use
        docker buildx inspect --bootstrap

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    # Spring Boot 어플리케이션 build (1)
    # 테스트로 해보는것이기 때문에 jar 빌드시 test는 스킵했다
    - name: Spring Boot build
      run: ./gradlew clean build --exclude-task test

    # DockerHub Login (2)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME  }}
        password: ${{ secrets.DOCKERHUB_PW  }}

    # Docker 이미지 build (3)
    - name: docker image build
      run: docker buildx build --platform linux/amd64,linux/arm64 -t johnny1004/munchymarket:latest --push .

    # GET GitHub IP (4)
    # 추후 보안그룹에 깃허브의 포트를 열어줘야 하기 때문에, 깃허브의 IP를 얻어오는 step.
    - name: get GitHub IP
      id: ip
      uses: haythem/public-ip@v1.2
      with:
        maxRetries: 5 # 여길 추가하면 액션이 최대 5번까지 재시도하여 GitHub의 공용 IP주소를 가져올 수 있도록 설정함

    # Configure AWS Credentials (5) - AWS 접근 권한 취득(IAM)
    # AWS 서비스에 접근하기 위해서는, 우선적으로 접근권한을 취득해야한다.
    # 미리 설정해둔 IAM Key 를 통해서 접근권한을 취득하는 task 이다.
    # * uses: ~ 는 GitHub actions 에서 정의한 프로토콜을 사용.
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-3 # Osaka

    # Add github ip to AWS (6)
    # 깃허브에서 EC2에 접근하기 위해서는 보안그룹을 추가해줘야함.
    # 깃허브의 ip를 보안그룹에 추가해주는 task.
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    # AWS EC2 Server Connect & Docker 명령어 실행 (7)
    # EC2에 연결, 수행할 Script 를 수행하는 task 이고, Docker hub 에서의 image pull & run 을 수행한다.
    # 추가로 현재 구동중인 컨테이너를 정지 - 삭제 후 docker run 을 수행한다. (컨테이너가 중복되는것을 방지한다.)
    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }} # ubuntu
        # password: ${{ secrets.EC2_PASSWORD }}  # password 인증을 안하고 key인증으로 변경했으므로 주석처리
        key: ${{ secrets.EC2_PRIVATE_KEY }}  # ssh 접속시 개인키값 secret 에 저장할것
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60s
        script: |
          whoami 2>&1
          if ! command -v docker-compose &> /dev/null
          then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          fi
          cd /home/ubuntu/munchymarket
          sudo docker-compose pull
          sudo docker-compose down
          sudo docker-compose up -d
        # 외부의 application.yml 파일을 Docker 컨테이너의
        # app/application.yml 경로에 마운트하여
        # Spring Boot 애플리케이션이 이를 설정 파일로 사용할 수 있도록 한다.


    # REMOVE Github IP FROM security group (8)
    # EC2에 접근하기 위해서 추가해준 보안그룹을 삭제하는 task.
    # 삭제하지 않으면, 해당 Actions가 수행될 때마다 보안그룹이 추가되고, 보안에 취약해진다.
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32


    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
