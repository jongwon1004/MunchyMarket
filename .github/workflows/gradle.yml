# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up QEMU #(0)
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - name: Set up Docker Buildx  #(0)
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Create builder  #(0)
      run: |
        docker buildx create --name mybuilder --use
        docker buildx inspect --bootstrap

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    # Spring Boot 어플리케이션 build (1)
    # 테스트로 해보는것이기 때문에 jar 빌드시 test는 스킵했다 
    - name: Spring Boot build
      run: ./gradlew clean build --exclude-task test

    # DockerHub Login (2)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME  }}
        password: ${{ secrets.DOCKERHUB_PW  }}

     # Docker 이미지 build (3)
    - name: docker image build
      run: docker buildx build --platform linux/amd64,linux/arm64 -t johnny1004/munchymarket --push .

    # GET GitHub IP (4)
    - name: get GitHub IP 
      id: ip
      uses: haythem/public-ip@v1.2
      with:
        maxRetries: 5 # 여길 추가하면 액션이 최대 5번까지 재시도하여 GitHub의 공용 IP주소를 가져올 수 있도록 설정함

    # Configure AWS Credentials (5) - AWS 접근 권한 취득(IAM)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-3 # Osaka 

    # Add github ip to AWS (6)
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    # AWS EC2 Server Connect & Docker 명령어 실행 (7)
    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }} # ubuntu
        # password: ${{ secrets.EC2_PASSWORD }}  # password 인증을 안하고 key인증으로 변경했으므로 주석처리
        key: ${{ secrets.EC2_PRIVATE_KEY }}  # ssh 접속시 개인키값 secret 에 저장할것 
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60s
        script: |
          sudo docker stop munchymarket
          sudo docker rm munchymarket
          sudo docker run -it -d -p 8080:8080 --name munchymarket johnny1004/munchymarket

    # REMOVE Github IP FROM security group (8)
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32


    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
